/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 28.09.2022 08:58:13

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 496;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[14];
TfLiteEvalTensor tflEvalTensors[14];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[5];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,201 } };
const TfArray<1, float> quant0_scale = { 1, { 0.042297918349504471, } };
const TfArray<1, int> quant0_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int8_t tensor_data1[50*201] = { 
  -70, -90, 8, -3, 85, 18, 92, 58, 81, 60, -55, 53, -60, -88, -39, 11, 64, 76, 28, 57, 47, -76, 20, 78, 11, 55, -25, -25, 81, -53, 87, -81, 62, -51, 26, -53, 76, 29, -31, -8, -91, 1, -76, 91, 16, -64, 4, 57, 73, 80, -87, -34, 82, -33, -30, 14, 65, -27, 91, 77, 60, -65, 69, -62, -22, -4, -89, -47, -6, -49, -59, 1, 53, -54, -78, -77, 82, -87, 53, 56, -20, 80, -22, 27, 30, 21, -19, 74, 3, -15, -60, -15, -39, -1, 12, 55, -41, -42, 87, 82, -77, -61, 5, -37, 43, 43, 88, 26, 67, -61, -73, 18, -64, 21, 90, 60, 40, 12, 63, 48, -90, -54, -16, -10, 10, -86, 1, -20, 82, -71, 35, 14, 62, -93, 74, 7, 55, -18, -18, -64, 29, 84, -8, 93, 23, 90, 2, 66, -93, 63, 91, 60, -66, 93, -58, 92, -4, -70, -68, -92, -52, 44, 86, 39, -80, -48, -41, -11, -30, 15, 94, -75, -67, 95, -29, -93, -3, 88, 57, -85, -91, 41, -1, 54, 75, 80, -92, -11, -46, 49, -9, -57, 32, 20, -18, 54, 11, -30, -1, -92, 92, 
  17, -9, 83, 65, 49, 11, -39, 54, -8, -4, -54, 74, 75, -63, 81, 45, -49, -95, -88, -1, 58, 76, -16, 36, 79, 58, -48, -56, -96, 1, 10, 34, 71, 38, -14, 91, 78, 27, 79, 49, -12, 65, 79, 15, -46, -79, -76, 94, 42, 53, -85, -94, 6, 52, 61, 70, 33, 72, -10, 35, 32, -74, -6, 49, -4, 75, 2, -73, 84, 11, 13, 30, -9, -74, 56, -69, 70, 85, -25, 32, -21, -32, -33, -32, -48, -86, -61, -90, 63, -64, 84, 42, 95, 38, -46, 67, 46, -82, 45, 73, -62, 97, -88, -1, 65, -47, 36, -48, 61, 54, 32, 81, 55, -54, -91, -43, 60, -21, 44, -84, 98, -8, 56, -49, -36, 59, 33, -51, 48, -66, -6, -17, 89, 88, 40, -35, 64, -30, -44, -76, 92, 65, 91, 63, 35, -34, -79, -55, 18, -7, -43, 32, -76, -86, 31, -14, -28, 47, 36, 49, -5, -66, -68, 85, 25, 59, -39, -8, -10, 35, -14, 93, 13, -8, -2, -43, 70, -21, -60, 0, -39, 57, -38, 6, 44, -57, -46, -50, -67, -27, -21, -37, 18, -46, -17, -60, -71, 30, -92, -65, 82, 
  -2, 10, 15, -37, -28, -64, -75, -2, 68, 89, 83, 32, -58, -26, 35, -6, 81, 21, 14, -36, 91, -26, 53, 6, 37, 37, -66, 84, 72, 29, 59, 32, 26, 86, 96, -16, -26, -68, 36, 56, -65, -17, 79, -10, -1, 20, 19, 37, 99, -11, -36, -69, 50, -26, -6, 67, -7, 99, -77, 89, 69, 0, -12, 90, 8, 79, 69, 55, -30, 70, 20, 81, 14, 21, 9, 46, 2, 88, -34, 92, 86, 60, -38, -67, -15, 71, -81, -89, -18, -81, -11, 54, -84, 75, -65, 3, 2, -73, -1, -12, 32, 12, -44, 83, 0, 28, -23, 34, 86, 66, -67, 18, 20, 60, 25, -70, 69, -74, 81, -78, -34, -63, -64, 98, 65, 98, -50, 18, -80, 31, -14, -37, 3, -12, 1, 43, -41, 55, 9, -6, -66, -83, 29, 36, 56, 58, 5, -18, 60, -68, 83, 0, -35, 18, -47, 35, -5, 27, 51, 2, 49, 14, -83, -39, 89, -17, 13, 11, -29, 50, 38, 83, 26, 71, -11, 41, 64, 81, 98, -84, 52, -23, -29, -32, 77, 85, -30, -11, 48, -42, -11, 13, 4, -13, -70, 59, 9, 29, -49, 78, 65, 
  -90, -30, 24, -19, 0, 45, -47, -50, -95, 39, 86, 16, -1, 27, 70, -56, 5, 62, -60, -7, 79, -11, -56, 87, -89, 91, 27, 60, 43, 0, -69, 22, 54, 51, 51, -54, -5, -62, -79, 57, -20, -30, 25, -11, 39, 61, 62, -95, 37, -54, -67, 5, -51, 78, -35, 7, 25, -28, 73, 51, 57, -77, -22, 57, -4, -75, -21, -70, -72, 19, 47, -37, 84, 58, 59, 80, 2, 79, -94, -88, -58, 90, 35, 89, -76, 54, -89, -61, -6, 39, 5, 6, 88, 4, 16, -89, -69, 82, -61, -93, -41, 7, -14, 6, 91, 81, 79, -20, 93, -8, 15, 44, 3, -38, -77, -79, -44, 46, 96, -20, 51, 27, -15, -65, 46, 48, -22, 24, -93, 60, -45, -15, -31, 77, -1, -13, -60, 92, -46, -11, -65, -87, 77, -57, 5, -40, 18, 64, 9, -11, -83, -62, -7, -75, -21, 29, -71, 16, 90, 68, -57, 84, 50, -61, -16, 18, 66, 42, -85, 39, -51, -26, -26, 64, 45, 78, 81, -31, 1, -45, -4, 67, 78, -24, 2, 1, -33, -58, 58, 56, 48, -62, -45, -9, -89, 25, -43, -5, -29, 11, 6, 
  -11, 77, 102, 51, 19, -90, -12, -47, 11, -54, -45, -10, 7, 70, -31, 14, 46, 72, 1, -85, 48, 62, -14, 17, -59, -13, 2, 91, -28, 83, 44, -1, -13, -32, 6, 60, -53, 71, 9, -14, -41, -86, 29, -61, 48, 32, 28, 21, -44, -18, 89, -78, -42, -5, -58, 39, 30, -16, 32, 11, -42, -82, -41, 33, -13, -24, 33, 31, 80, -27, 90, 33, -6, 10, -85, -64, -37, -27, 60, 23, -22, 41, -61, 87, 37, -50, -41, -35, 28, 83, -40, 7, -11, 81, 37, -64, 15, -12, 4, -63, 61, -17, 21, -28, -24, 95, -35, -74, -32, 11, 56, 98, -83, 43, -56, 67, -34, -55, 70, -78, -41, -50, -28, 76, -67, -76, 88, 48, -22, -81, 71, 10, -8, -75, 32, 25, 75, -4, 21, 76, 46, 63, -28, 33, 77, 96, 43, -29, 73, 46, -65, 1, -30, -86, -21, -53, 34, 76, -83, 74, -4, 2, 47, 53, 92, 84, -44, 94, 57, -54, 47, 5, 69, -54, 58, -56, -22, -22, 43, 54, -25, 54, -63, -20, -60, 33, 20, 62, -43, 1, -11, 93, 13, 49, 56, -55, -31, -51, -1, 6, -63, 
  52, -24, 19, -40, -37, -34, 16, 68, -45, 23, 42, 31, 42, -82, 61, 60, -4, 74, 58, 85, -16, 22, 55, -41, -22, -73, -2, -83, -91, 24, -85, -36, -83, 60, 90, 47, 26, 4, 2, -40, -2, 25, -53, 9, 6, -97, -53, 94, -64, 68, 45, -13, -33, -42, -84, -17, -15, -93, 84, 14, -9, 93, -75, -29, 18, -86, 85, -91, 6, -4, 77, -4, 10, 31, 73, -2, -34, 101, -8, 60, -77, 47, 0, 16, -58, -15, -81, 98, 57, -72, 61, 74, 6, 58, 13, -19, 94, 0, -11, 36, -82, -63, 62, 73, -58, 70, -57, -89, -30, -37, -73, -71, 57, 37, 23, -74, -91, -11, -72, -3, -95, 50, 5, -26, 79, -56, -82, 23, 73, -45, -19, -6, -60, 24, -67, 28, 75, -22, -11, -39, 89, -37, 25, 74, -38, -7, 68, 85, 11, -62, 57, -59, 36, -87, -87, -20, -87, 44, -77, -63, -19, -22, 1, 4, 25, -47, -51, -70, 31, -13, -9, 40, 78, -91, -56, 26, -25, 52, -52, -88, 92, -16, 12, 15, -77, 63, -14, 67, 74, -7, 87, -68, -22, 28, -69, -92, 63, -93, -22, -76, -71, 
  -71, 53, 24, -43, -77, -52, 24, 47, 20, -41, 4, 13, 44, -7, -39, -29, 76, -52, -2, 68, 36, -14, 47, -12, 38, -20, -79, 34, -83, 64, -51, 25, 46, 38, -48, -63, -34, 82, 17, 66, 33, -83, -71, 38, 88, -50, 57, 30, 63, -23, 20, 40, -38, -37, 70, -12, 56, -67, 62, 52, -14, -50, 33, -10, -88, 78, -44, 44, -61, 16, 41, 92, 81, 46, 78, -12, -51, -47, 82, -17, -23, 32, 84, 52, -65, -82, 49, 17, -80, 14, -61, 98, -46, 78, 0, 56, -83, 88, 59, -18, -15, -23, 26, 2, 52, -13, 88, -87, -38, 6, -53, 67, 71, -22, 23, -24, 40, 54, -1, 52, -41, 53, 78, -48, -26, 10, 34, -62, -71, -3, 92, 14, -41, -18, 60, -30, -9, 38, -19, 69, -14, -70, -49, 31, -10, 81, 18, -39, -56, -63, 39, 11, -78, 92, 91, -15, 97, -74, -76, -9, -3, 9, 33, -75, -43, 79, -62, -4, 79, 12, -90, 47, -51, 66, 89, -12, 9, -1, 53, 31, 50, -41, -7, 57, 97, 3, -90, 27, -75, -33, 97, 0, 63, -32, 71, -58, 72, 1, 9, -23, 27, 
  -28, -90, 86, 65, 58, 18, -12, -17, -31, 51, -84, 90, -85, 15, 28, 15, 9, -74, 70, 80, 84, -45, 9, -30, -16, 60, 28, -42, -91, -93, 43, -34, 65, -42, 28, -84, -87, -78, -60, -72, -88, 81, 21, 43, 78, 73, 49, -50, 17, 38, 81, -36, -12, 91, -59, 46, -66, 74, 26, -12, -95, 30, 1, -5, 33, 33, -94, -61, 29, -92, -28, -72, -58, 53, -57, -46, -12, -50, 89, 2, -17, 77, -88, 94, 23, 58, -10, 15, 95, -28, 42, -14, -2, 46, 27, -55, -95, 86, -79, 18, 55, -3, 3, -92, 38, -52, -55, -58, -74, -89, 76, 81, 79, 55, 68, -42, 38, -19, 23, 35, 74, -47, -28, 72, -34, -84, 36, 74, -23, -88, 30, -22, 61, -19, 23, -15, -60, 91, -84, -13, -56, 87, -63, 2, -84, -59, -33, -10, -1, -69, 13, -21, -36, 70, -68, -83, 38, 44, 42, -79, 76, 10, 65, -91, -13, 40, 38, 71, 33, -79, 90, 59, 44, 69, 67, -11, -87, 14, 25, -63, -13, 95, 47, -92, 1, 5, -83, 62, -63, 35, -1, 90, -54, -74, 47, 93, 91, -36, -75, -4, 34, 
  33, 75, 42, -65, -95, 69, -60, -17, -13, -30, 82, -27, -34, 76, 28, -13, 46, 26, 4, 41, -96, -69, -1, 36, -17, 92, 82, 83, 35, -7, 85, -55, -45, -43, -10, 21, 74, 18, 36, 91, 74, -30, 40, -35, -8, 80, -62, 75, -34, -67, -68, -37, -40, -38, -63, -11, 33, 72, 31, 50, 74, 13, 71, 52, -23, -87, 57, 37, -55, 61, -63, -5, 72, 42, 12, 61, -43, -79, -42, 63, 59, -91, -21, 61, -91, -54, 49, -83, -20, -2, -33, -2, 79, 63, 16, 2, 91, 71, -44, -36, -30, -78, -68, 73, -11, 38, 88, 35, 22, -2, 68, 54, -41, 24, 4, -38, 74, 30, 22, 73, -80, -62, -50, 5, -6, -40, -36, -87, -12, 55, -75, 31, 94, 35, -2, -37, 21, 43, 86, 42, 56, 64, 72, -93, -76, 31, 19, -95, -9, 16, -91, 6, 83, -31, -70, 55, 9, -92, -30, -40, 34, -35, -83, -90, 31, 79, 86, 42, -42, 31, -36, -22, -29, 86, -38, -89, 30, -83, 9, -59, 2, 9, -68, 68, 22, 48, -34, 78, -11, -40, 15, 90, -50, -80, 80, -46, 53, 94, -76, 86, -48, 
  -15, 18, 19, -78, -11, -39, -72, -98, 43, 78, -85, 74, -83, 92, 74, -46, -65, 87, -78, 63, -21, -29, -97, -82, -48, 28, 75, 68, 17, 12, 9, 35, 3, -18, 50, 85, -73, 53, -16, 100, 19, 71, -22, 13, -66, 92, 19, 89, 35, 66, -8, -15, 72, -12, 100, 1, 34, 72, 32, 100, 47, -87, -20, 69, 63, 97, -81, -97, -127, 56, 70, -86, -126, -35, -69, -29, -60, -33, -64, -4, -95, -52, 39, -17, -77, 79, 21, 35, -11, -91, 40, -67, 11, -20, 60, -26, 1, 6, -10, -24, -78, -20, -41, -9, -83, 77, -57, 12, -83, -41, -70, -79, 65, -10, 28, 86, 45, -85, 48, -89, -78, -64, -17, -80, 48, -46, 15, -20, -34, 13, -41, -29, -10, -18, -31, 108, 19, -84, -82, -58, -7, -23, -115, -87, -81, -104, -95, 8, 40, -16, -112, 21, -41, -49, 60, 39, 28, -81, -68, -40, 33, -52, -89, 4, -28, -17, -10, 40, -65, 31, -60, -42, 78, -83, -26, -79, 10, -27, 5, -58, 9, -50, -16, -54, -21, 51, -69, -6, 78, 5, -5, -91, 21, 51, 31, -86, 32, 88, 85, 43, 84, 
  -76, 11, -32, -76, 7, 83, -69, 64, -51, -69, 30, -37, 90, 83, 35, 26, -38, 49, 61, -43, 86, 74, -60, -13, -53, -25, -47, -2, -39, 8, -45, -7, 66, 61, 51, -15, 63, 48, -53, 3, -58, -46, 30, 14, -6, -11, -38, -39, 40, 86, 48, 68, -42, -48, 64, 13, 45, 46, 9, 13, 41, 42, 46, -15, 48, 68, 46, -65, 55, 62, 55, 33, 31, -73, -33, -52, 89, 86, 28, 24, 9, 58, -46, -45, 69, -43, -14, -91, 3, 66, 22, 89, 36, 52, -40, 73, -6, 18, 23, 15, -38, 3, -29, 22, -15, -4, 8, -65, -46, -80, 77, 45, -6, 70, 25, 46, 72, 92, 42, 25, 21, -47, -17, -13, 12, -25, -54, -27, -83, -65, -31, -35, -68, 56, -86, -58, -10, -76, 35, 9, -17, -94, -21, -16, 80, 51, 29, -71, 66, -1, 71, 80, -46, -44, 17, -12, -29, 76, -58, 13, 44, -86, 90, -23, -39, -95, -5, 51, -17, -41, 78, 27, -65, -60, -88, 90, -48, -18, -58, -89, -72, -34, 54, 44, -4, 47, 72, 34, -30, 39, 27, -18, 18, -49, -16, 23, -24, 5, 60, -20, -80, 
  72, -40, 103, -70, -25, -84, 47, 72, 54, -46, -59, -43, -76, -9, -67, 72, -32, 10, -4, -10, -16, -38, -41, -12, -17, 64, 66, 63, -58, -45, 31, 60, -66, -87, -22, -27, 2, -59, -68, -87, -80, 72, 61, -23, 12, -16, 0, -70, 65, -49, 32, 61, 102, -1, 87, -23, 77, 32, 83, 30, 41, 81, 4, 41, -67, 37, -10, 30, -21, -28, -72, -66, 16, 56, -65, 66, 17, 85, -42, 84, -42, -17, 28, -43, -86, 26, -25, 25, 55, -25, -10, 4, 74, -15, 11, -83, 43, 97, 20, -37, -27, 77, 60, 23, -71, -27, 10, 88, 36, -56, 91, -17, -76, 9, 88, 21, 34, 20, 5, 6, 35, 64, 45, 26, 42, -59, 27, 17, -60, 96, -82, -23, -55, -16, 80, -95, 70, 43, 7, 13, 69, -52, -87, 49, -31, 75, -7, 36, 71, 32, 47, 48, -87, 86, -86, -7, -5, 35, -7, 16, 91, 34, 35, 20, 36, -33, 0, -14, -42, -84, -13, 30, -82, -80, -80, -54, 102, 31, 91, -53, 30, 86, -69, 25, -81, 50, -67, 98, -1, -46, -82, 74, 10, 76, -20, 71, 61, 7, -80, 53, -78, 
  36, 40, -30, -59, -7, -21, -91, 78, -88, 19, -11, -15, 63, 37, -53, -46, -22, -8, -40, 95, -29, -65, 63, 29, -71, 33, 59, 49, -90, 91, 65, -70, 8, 30, 59, -67, 74, -30, 80, 45, 65, -20, 71, -13, -56, -36, 83, -66, -35, 80, 65, -72, -14, 38, -68, 13, 22, -18, -8, -47, 81, -23, -25, -91, 47, -52, -1, 21, -43, 55, 38, -3, -16, -21, 33, 62, -66, -69, 35, -89, 64, 38, -94, 47, 35, 82, -16, 6, -28, 14, 38, -6, -26, 27, 4, 43, -87, -46, -41, 66, 10, -80, 76, 24, 74, 1, 69, -85, 60, -22, -54, 83, 25, 94, 63, 19, 42, 5, -72, 64, -27, 16, 80, 37, 32, 70, -21, 75, -81, 61, -3, 78, -5, -23, 15, 60, 83, 90, 26, -69, 81, 84, -94, 9, -79, 6, -39, 6, 64, -87, -1, -67, 37, -47, -38, 65, -16, 31, 65, 91, -13, 91, -33, 13, 81, -38, -40, 79, -76, -50, -79, 20, -44, 17, 46, -47, 76, 24, -29, 86, -7, 72, 61, 63, 31, -93, 68, -56, 91, 38, 13, 52, 9, 13, 43, -39, 62, 35, -18, -21, 91, 
  25, 65, -42, 20, 108, 61, 35, 97, -83, -3, 82, 77, -89, -75, 47, -71, -32, 50, 7, 52, -65, 82, 55, 57, -8, 56, 58, -96, 67, -62, -77, -54, 19, 8, 44, 71, -29, 52, -14, 46, -78, 35, -61, 31, 78, -13, -64, 12, -72, -58, 27, -93, -57, 21, -53, -86, 81, -39, -3, 79, 15, -36, -2, -54, 24, 44, 44, 101, 77, 90, 75, 97, 71, 86, 62, 7, -85, 37, -69, -32, -2, -15, 87, -30, 39, -80, 50, 52, 19, 10, -26, 43, -72, -30, 57, -73, -7, 14, -10, -90, 44, -7, 77, -60, -19, 3, 41, -86, -84, 73, -18, 21, 74, 26, 66, -79, -26, 84, -30, -77, -40, 17, -79, 13, 5, 71, 82, -12, 49, 19, -1, -71, -101, 9, 0, -34, -15, 37, -38, 90, -4, 87, 41, -67, 97, 40, 40, -29, 6, 19, -38, -60, 74, -74, 96, 27, 51, -90, -68, -62, -40, -23, -79, 5, 61, 59, 32, -87, -88, -60, -79, 17, 18, -65, -28, -1, -87, -53, -4, 66, 65, 29, 89, -52, -39, -18, -72, -72, -57, 62, -16, -44, -34, -54, 80, 30, 13, -83, 27, 59, -41, 
  -47, 59, -42, 29, -66, -10, -6, 31, 29, 29, 9, 90, 20, 58, -87, -65, 4, -22, 2, 52, -68, -49, -42, 42, -90, -53, 8, -17, 69, 22, 29, -5, 47, -55, 59, -68, 28, -35, -6, 95, -51, 94, -67, -23, -91, 85, -44, -78, -27, -14, -78, -3, -68, 40, 42, 93, 52, 90, 7, 84, 93, -19, -45, -20, 83, -76, -74, 38, -80, 31, -85, 26, 98, -14, -45, 69, -65, -5, -44, -34, 40, -5, -72, 61, 71, -6, -73, -16, -23, -82, -72, 25, -40, -44, -5, 7, 98, 73, -35, -30, -46, 5, -5, 12, -94, -73, 27, 34, 66, 71, -64, 83, -61, 69, 52, -57, -72, -61, -36, -23, 0, -14, 3, -19, -54, -37, 47, 29, 85, -71, -56, -83, 25, -90, -71, 33, 71, 56, 43, 68, 85, -73, 4, 98, -72, 56, 64, 73, -79, -56, 79, -11, -8, 24, -67, -90, -78, -50, 63, -22, 21, -25, 75, -79, 99, 57, 57, -72, -38, 5, -85, -8, -1, 73, 96, 1, 21, 46, -32, 63, 72, -39, -28, 5, 6, 64, 68, -67, -28, 53, 15, -31, 42, -24, 1, -8, 36, -35, -52, -20, -1, 
  -46, -1, 60, 13, -38, -29, -57, 77, 37, -19, -13, 60, -77, 94, -22, 98, 84, 54, 60, -12, -12, -40, 55, 62, 55, 4, 45, 15, 74, -89, 69, 32, 17, 1, -90, -74, -84, 16, -3, -71, -48, 52, 81, -38, 85, -17, -46, 54, 27, 62, -11, -49, -47, -58, -29, -12, -70, -59, 24, -28, -88, 64, -101, -40, -96, -95, -94, -77, 89, 59, 56, -78, 58, 85, -77, 44, 22, 88, 74, 93, -53, -52, 38, -45, -14, -72, -58, 68, 40, 67, -32, -32, 34, -7, 32, 38, 17, -57, -89, 82, -58, 51, -39, -87, -1, -76, 56, 33, -25, 23, -53, -89, -25, -53, 77, 51, -64, -44, -98, 76, 56, 47, -38, -22, 72, -72, 5, -89, -39, -9, 55, -24, -40, 32, 27, -89, 34, 2, 50, -37, -15, 65, -21, 95, 40, -47, -70, 53, 26, 101, -21, -35, -44, 98, -77, 44, 30, 22, 17, -69, -55, 86, 65, -79, -34, 26, 88, 85, 70, 64, -38, -40, -72, 38, -46, 26, -13, 12, -67, 12, 9, -21, 35, 31, -64, 21, 49, -2, 29, 11, 51, 12, -91, -31, 23, 79, -10, 35, -38, -4, -96, 
  -71, -34, -1, -44, 3, -67, 45, 26, -45, -71, 36, 24, 7, -8, 26, 9, 25, -51, 29, 50, 83, -34, 13, 7, -41, -31, -31, -43, -36, 41, -87, 75, 46, 2, 46, 84, -87, 73, -46, 88, 95, 26, 17, -72, 66, 49, -56, 20, 29, -5, -2, -25, 85, -18, -88, 25, 23, -82, -24, 89, 41, -22, -59, -83, 59, -2, -72, -75, 30, -5, -8, -63, -55, -11, 74, -40, -63, -68, 24, 58, 77, -29, 4, -58, -32, 63, 49, -15, 89, -54, 28, 55, -42, 49, 59, -57, 37, -22, 92, 12, -80, -77, -55, -64, -37, -9, -79, 66, -56, -12, -13, 88, 84, 2, 6, 26, -69, 95, -27, -10, -58, 15, -44, 70, -83, 31, -45, 19, 37, -26, 26, 8, 49, -46, -61, 94, -73, -4, 72, 56, -37, -28, 13, 87, -3, -4, -36, 34, -56, -27, -67, 13, 20, 37, -77, -2, -45, 56, -72, -24, 37, 69, -34, -55, -36, -67, 35, -10, 62, -59, 63, -37, -9, 6, 44, 71, -2, -74, 89, -48, -1, 57, 23, -69, -90, 90, 50, 89, -18, 63, -34, 71, 85, -6, -52, 9, -56, -37, -26, 64, -51, 
  -63, -34, -17, 57, -13, -58, -40, -9, -100, -31, -22, 26, 46, -59, -95, 33, -81, -68, 82, 16, -44, 82, -64, -34, 69, 67, -28, 58, 70, 88, 69, 71, 63, -8, -6, -70, 11, -85, -49, -63, 32, 27, -18, 53, 68, -39, 50, -49, -11, -53, -56, -40, -45, 2, 56, 73, 88, -34, 53, 36, 27, 44, -77, -63, 34, -43, -45, -34, 34, -44, -55, -75, -33, -2, -18, 40, -79, 22, -71, 70, -1, -37, -66, -15, -21, 36, -88, 90, 39, -30, 64, 64, -20, 46, -2, -64, 0, -16, 7, 71, 38, -59, 16, 30, -55, -81, -88, -84, 32, 94, -89, 18, 6, 76, 5, -37, 73, 33, -84, 60, 61, 17, 68, 81, -33, -36, -46, -6, 82, -29, -34, -46, 1, -15, 12, 3, 1, 31, -28, -23, 48, 11, 31, 1, -92, 9, 78, -25, -13, -67, -50, 62, -31, -74, -52, -25, 48, -49, 85, -67, -47, 24, -96, -87, 64, 71, -98, -30, -24, -85, -59, 86, 12, -93, 23, 23, 80, 7, -27, -30, 89, -92, 79, -86, 65, -77, 83, -71, -22, -62, -92, -93, -53, 10, 25, -96, -48, -96, -26, 39, 19, 
  -70, -100, 26, 47, -72, -29, 74, 76, 67, -42, -71, 83, 61, 46, 69, -72, -25, 71, 81, -58, 16, -58, -60, 63, 18, 101, 43, 12, 39, 101, -50, 86, -64, -25, -41, 45, -42, -16, 90, 94, -53, -82, 52, 7, -15, -26, 54, 63, 36, -67, -25, 67, 92, 43, 19, 46, 57, -45, -58, -33, 36, -2, 84, -3, 91, -20, -47, -62, 64, 49, -53, 30, -45, 83, -21, 90, -11, -33, -31, 98, -10, 41, -8, -69, -45, 84, -34, 98, -56, -38, -73, -44, -14, 104, 75, -48, 103, -65, 37, 82, -25, 34, -11, 40, -74, -74, 63, 75, 58, -70, -46, -47, 59, 9, -33, -18, 62, 7, -10, 6, 24, 88, -13, 97, -31, -43, -8, 63, -62, 45, 4, -37, 54, -43, -71, -66, 86, -17, 13, -76, 44, -49, 80, -28, 58, -13, -14, -76, -33, 13, 9, 62, 35, -7, 21, -56, 56, 57, -24, 46, 57, -7, -75, 39, 101, 20, 81, -2, -34, 93, 83, -17, 19, 95, 64, -17, 32, 58, 101, 82, -54, -6, 80, -58, 9, 3, -7, 23, 74, 12, 38, -80, -43, -46, -46, -58, -71, 46, 94, -72, -18, 
  -30, 45, -6, 48, -25, -6, 39, 80, -24, 82, 91, 85, -86, -67, 16, -1, -71, 57, 18, -27, 84, 96, 6, 54, 28, -58, 80, 71, 74, 21, 65, 42, 4, 31, 98, 30, -25, -65, 80, -43, -16, -50, -50, -70, -58, -76, -92, -58, -14, -78, 92, 5, -92, -91, -32, 78, -66, 54, -57, 6, 74, 34, -88, 18, -90, 31, -75, -26, -42, -62, -52, 3, 9, 94, 11, -47, -68, 40, -27, -18, 18, -60, -75, 79, -64, 61, -70, -39, -65, 88, 26, -86, -40, -32, 70, -29, 68, 73, -92, -8, 81, -11, 92, 60, 91, -52, -37, 78, 18, 17, 0, 88, -25, -9, 30, 4, 88, -4, 43, -49, 10, -39, 88, -39, -8, 27, 79, -74, 26, 1, 12, 11, -38, 96, -63, 32, 41, -75, -14, -96, 58, -20, 7, 1, 19, 75, 62, -77, 8, -54, -90, 72, 61, 60, -42, 52, -87, 95, -66, 16, 87, -10, 23, -10, -90, -33, -81, -90, 46, 76, 95, -39, 61, -29, -85, 31, 22, -20, 34, 66, -84, 2, -13, -3, -2, 86, -58, -53, 27, -15, 90, -14, 76, 6, 18, -50, -84, -34, -82, -69, 91, 
  -91, -70, -57, 0, -65, 66, 77, -38, -92, -92, -89, 31, -88, -5, -52, -63, 91, 82, -20, -37, 74, 2, 14, -90, -24, -81, 46, -93, -56, -48, 55, 48, 44, -77, -35, 43, -69, -3, 23, 78, -44, 57, 37, 87, -12, 37, 54, 65, 47, 31, 75, -37, -90, -70, -34, 35, -33, -75, 7, -74, 43, -40, 11, -72, -39, 48, 46, 11, 10, 23, 9, 36, -66, -43, -74, 57, 90, 48, -37, -6, -77, -20, 89, 52, -24, -63, -37, -43, -87, 20, -6, -37, -18, -15, 59, -67, 36, 44, 47, 42, -75, 79, -2, 15, 50, -9, -11, -19, 85, 93, 51, 5, 98, 76, 60, 30, -47, -24, 26, 57, -31, -43, -40, 14, -83, 66, -75, -10, 58, -9, 32, 48, -62, -1, 61, -71, -56, -43, -44, -19, 5, 40, 38, 37, 4, -44, -78, -40, -48, 82, -89, -89, 91, -32, -11, 60, -45, -3, -58, -91, 4, 78, 33, 52, -88, -51, -26, 78, -60, -16, -91, -1, -57, 88, 79, 33, -59, 23, 58, 60, 30, 28, -36, -73, -64, 7, 23, 20, 28, -72, -13, 56, 39, -8, 49, -31, 46, 33, 25, 13, -11, 
  16, -26, 61, 60, -64, -57, -28, 72, -51, 22, 26, -57, 88, -35, -27, 78, 17, -84, 26, -4, 94, 96, -82, -88, 8, 12, 38, 36, 51, 93, -71, -52, -54, 82, -73, -38, -4, -61, 5, -20, 77, -71, -70, 61, 10, -53, -80, -70, -4, 70, -90, -60, -65, 27, 44, 49, 32, 10, -91, 24, -44, 69, -73, 22, -84, 91, 72, 64, -119, -41, -45, -78, 92, -74, 18, -25, 66, 73, -58, 81, -45, 47, -46, 87, 89, 3, 67, 16, -40, 25, 32, -43, -13, 89, 9, 75, -70, 51, -36, -33, 39, -29, -66, 46, 48, -7, 10, 81, -41, 88, 86, -18, -85, 13, -2, 80, 12, 13, -84, -81, 80, 26, 28, 8, -72, 22, -61, 9, -21, 39, -53, -28, -29, 35, -87, -82, 51, 8, -21, 54, 2, 92, -90, 90, 57, -87, -60, 70, -89, -77, -3, -66, 90, 12, -75, 76, -10, 24, 37, -14, -58, 78, 91, -31, -75, 66, 33, 16, 62, 64, -36, -76, -80, 32, -57, -40, -8, -51, -87, 49, 0, -90, 75, 23, -71, -69, -46, 84, 73, 91, -50, -25, -75, -66, -57, 3, -1, -81, -8, 33, 75, 
  -95, -38, -83, -28, -37, 87, -53, -94, -13, -20, 12, 77, 70, 75, 21, -74, -21, 69, 65, -14, -6, -75, 60, 53, -95, -15, -44, 78, 36, -13, -71, -58, -48, -14, -13, -19, 21, 15, 62, -82, 19, -62, -63, 39, 33, -46, 63, 65, 73, -65, -24, -63, -15, 14, -40, 43, -34, 50, -92, 76, -92, 37, 17, -31, 16, 24, -87, 40, 20, -61, -83, 74, 24, 13, -45, 80, -73, 39, -40, -49, -69, -2, 92, -74, -71, -49, 13, 72, -71, -74, -89, -53, -75, -61, -8, 0, 85, -55, -8, 15, 39, 13, 51, -74, 2, 78, 51, -84, -95, -32, 74, -53, 92, 77, -34, 38, 96, -7, 59, -43, -60, -22, -64, -11, -91, -78, -55, -90, 19, -95, -33, 18, 28, -12, -28, -46, 28, 79, 72, -18, 36, 24, 90, -90, -30, -69, 86, -4, 48, -22, 59, -40, 62, 64, -40, 69, 37, -96, -63, -1, 34, -78, -39, 7, 11, -36, 8, -44, 22, 50, -68, 70, 89, 76, -25, 95, 49, 64, 42, 46, -69, 23, -30, 24, -83, -44, -9, -43, -21, -41, 67, 85, 59, 7, 43, 11, -84, 8, -24, -62, -86, 
  -13, 80, -89, 37, -67, -25, -14, 35, -49, -32, 11, 84, 74, 48, 25, 54, -19, -29, 69, -5, -58, -24, 48, -90, -57, -18, -32, -99, -39, 30, -85, -35, -57, -17, 69, -72, -71, -23, -77, 62, -64, -98, -12, -93, -62, 3, -14, -71, -96, 0, -64, 43, -45, 53, 71, -10, 78, -72, 46, 84, 34, -91, -14, 37, 53, 44, 15, 23, 86, -101, -47, 40, 13, -32, 92, 52, -71, -74, 54, 74, -54, -42, 57, 93, -7, -30, -82, -93, -60, -51, -26, -72, 33, 32, 74, 24, -30, 61, 8, 92, -11, -14, -19, 47, 78, -15, -99, -83, -6, 65, 20, 62, 46, -62, 2, -55, 50, -1, 27, 56, -43, -93, -19, -62, -85, 59, -17, -46, -71, -62, 18, 56, 67, 16, 5, 59, 55, -4, 52, 77, -8, 94, 29, -72, 81, 69, 34, -9, 71, 97, 31, -24, -49, 28, -45, -73, 89, -2, 56, -25, 37, -25, -27, -9, 25, -47, -7, 14, 56, -57, -32, -46, -37, 90, -75, 72, 0, 42, -18, 87, -80, -29, -94, 88, 54, 20, 92, -9, -35, 24, -90, -15, 82, -25, 44, 73, 90, -21, -1, 6, 71, 
  47, -39, -67, 15, -3, -25, -41, -34, -33, 40, 88, -33, -44, 68, 60, -63, -71, -78, 84, 72, -80, 51, 62, 74, 26, -19, 22, -63, 0, 9, 36, -19, 53, 50, -9, -68, 44, -67, -52, 6, -10, -24, -66, 81, 70, 26, 60, -33, -2, 38, 97, -49, 31, 16, -60, 69, 87, 39, -26, 70, 21, 36, -13, -75, 78, 97, 73, 27, 83, 24, 80, -22, 58, 25, 23, -60, 5, 18, 13, 59, 66, 30, 93, -70, 84, -40, 56, 44, 48, 71, -3, -65, -82, 17, -82, -56, -13, 8, -66, 91, 30, -39, -33, 78, 82, -30, -78, 12, -3, 86, -63, 96, -1, -32, 58, -45, -45, -1, 7, -73, 75, -42, -78, 7, 14, 53, -2, 39, 68, -15, 19, 100, -74, -38, 57, 76, 41, 98, -35, -83, -87, -1, 98, -75, 30, 98, -6, -88, 60, -68, 101, 25, 87, 20, 35, 100, -81, 44, -20, -84, 40, -46, 67, -55, 1, -50, 18, -21, -76, 36, 10, 0, -20, -71, 36, 40, 1, 59, -50, -79, 9, -61, -60, 51, -71, -4, 44, 35, -4, 75, 73, -11, -73, 46, -70, 42, -39, 23, -90, 53, 9, 
  -55, 26, 16, -9, -54, -23, -44, 63, -84, -72, 20, 13, 94, 60, -5, 0, 29, -7, -83, -30, 8, 36, 29, -10, 4, -30, 63, -84, -36, -44, 27, -63, 27, -45, -26, 54, 30, -31, 45, 0, -3, -37, 0, 36, 77, 73, 14, 78, -16, 91, 52, -62, 52, 0, -28, 70, 1, 26, -22, 93, 71, -49, 19, 52, 45, 57, 14, -84, 77, -88, 81, 58, 61, 82, -28, -90, -68, 55, 76, 39, -81, 40, -47, -86, -22, 23, -9, 7, 51, 42, -29, 28, -20, -65, 38, 91, 75, -23, -6, 84, 92, -88, 63, -86, 93, -55, -47, 64, 8, 38, -48, 88, -54, -79, -19, 38, -4, -16, 11, 51, 78, -28, 62, 69, -64, 64, 75, 92, -71, 23, 49, -54, -17, 93, 0, -46, 15, 18, 52, -58, -33, 87, 2, 58, -40, -68, 4, 26, 94, 30, -2, 59, 94, 26, 15, 90, 55, 30, -86, -37, 23, -19, -4, 8, -22, -65, 53, -7, 48, 18, 34, -48, -63, -53, 77, 41, 8, -38, 17, -56, -12, 52, 89, 31, -57, 27, -56, -34, -18, -14, -22, 42, 9, -23, 57, 74, -36, 73, 83, 87, 15, 
  99, 29, 13, -2, -55, -70, -8, -70, -4, 77, -42, 96, -24, 62, 22, -76, 2, -72, 67, 88, 8, 24, -55, 3, -30, 84, 26, -1, 44, -19, 18, 46, 9, -94, -45, 29, -21, 47, 56, 90, -17, -13, 36, 33, 37, -86, -85, 13, -25, 81, 85, -61, -65, 53, -62, -33, -58, -57, -26, 4, -7, -61, -32, -9, 60, -86, -97, 42, 12, -96, -78, -5, -59, 74, -5, 35, 61, 15, -16, -68, 77, -45, -63, 71, 60, -83, -79, -69, 70, -9, -89, -54, 31, -75, -37, 50, 39, -37, 16, 48, -43, -19, 41, 4, 39, 81, -20, -61, 66, -21, 31, -17, 49, -91, 73, -20, -75, -45, 32, 40, 87, -92, -20, -32, 31, 18, 57, -86, -8, -69, -96, -48, 70, 14, -37, 66, -76, -23, -37, 74, -33, 43, -8, -36, 56, 2, -77, -41, 17, 73, 28, -81, -72, -80, 4, 29, -82, -12, 87, 85, -24, 24, -35, -2, 13, -39, 9, 52, -49, 26, -16, -94, 9, 56, -74, -78, 4, -3, 74, 77, -14, -91, 5, -46, 73, 50, -19, -51, -66, -29, -69, -37, 79, 13, -11, -96, -49, -80, -61, 89, -20, 
  92, -81, 14, -54, -51, -29, -2, -50, -75, -77, 66, 56, 79, 22, -93, -77, -85, 73, 41, 10, 30, 85, 0, 37, 48, 72, 38, -10, 79, -84, 14, 59, 82, -93, 64, -44, -79, 75, -94, 55, -2, -50, -10, -24, 12, 17, 3, 95, 85, 95, -42, -3, -86, 90, 62, 91, -2, 13, -37, -14, -30, -40, 18, -38, 67, -85, 39, -39, -47, 67, 83, -78, 1, -40, -29, 69, 2, 77, 36, -79, 86, 83, 74, -33, -88, -4, 94, -95, 58, -18, -89, 76, 11, 36, -91, 41, 76, 39, 43, -68, -7, -36, 15, -78, 85, 62, 1, -30, -39, 52, 36, 70, 16, 5, -93, -84, -64, 91, 45, -85, 78, 14, -67, -72, 67, 90, -89, 76, -5, 63, -16, 67, 83, 48, 5, -58, -87, -62, 74, -28, 86, -35, -54, 91, -87, 79, -38, -25, -23, 76, 6, 37, 34, 86, -68, 75, -37, -67, 42, 91, -47, 94, 46, -90, -90, -69, 93, 51, 57, -2, 10, -15, -67, -26, 10, 37, 90, 29, -35, -42, -40, -74, 12, 62, -75, -20, 94, -26, -51, 88, -3, -72, 26, 58, 41, 18, -36, -57, 76, 57, 6, 
  60, 80, -54, -9, 110, 1, 21, -68, -19, 100, -78, 18, 38, 13, -14, 23, -75, -38, 71, 47, -72, -43, -87, -91, 69, -78, -99, -70, -64, -78, 41, 54, -26, -90, 39, -48, -19, -48, -26, -18, 55, 83, 13, 30, -26, 79, 49, 41, 5, -57, -62, -73, -85, -26, 60, -61, -57, 76, 51, -89, 88, -11, -71, -74, -35, 35, -32, 5, -57, 49, -70, 69, 52, -25, -20, -47, -52, -9, -23, 50, 7, 7, -16, -56, 28, 20, 10, -53, 79, -36, -51, -42, -38, -41, 19, 86, -49, -74, 38, 77, -62, 59, 24, -61, -39, -2, -59, -44, 10, -101, -77, 72, -37, 7, 7, 60, 80, -38, 47, 62, -92, -36, 79, 31, -54, -20, -5, -83, -82, 55, 59, 9, -45, 78, -78, 36, 57, -5, 18, -6, -9, 12, 27, 83, 84, 58, -16, 87, -65, 45, 48, 4, -8, 45, 52, 32, -47, -28, -40, 45, -16, 81, -44, 98, -69, -35, -1, 11, 15, 36, -45, -45, -18, -77, -32, 29, 33, -83, 49, -14, 85, 33, -1, 8, 52, -29, -38, -8, -7, 24, 72, -85, -5, -88, -81, 21, 8, 66, 31, 2, -8, 
  22, 51, -17, 94, -21, -18, 36, 36, -51, -75, -24, -77, 36, 57, -4, 56, -34, 43, 69, -36, 99, -22, -67, 21, -29, -65, 92, 18, -35, -33, 66, -22, -69, 23, -20, -83, 29, -77, 13, 100, 17, 54, -77, 11, 10, 97, 83, 67, -18, 64, 34, 97, 68, 61, -45, -42, 99, -68, -25, -80, -50, -46, -69, 93, 15, 18, 79, 61, 96, -69, 80, -65, -62, -83, 71, -35, -42, -55, -22, -86, 13, 71, -86, -48, -5, 57, -51, 63, -87, -15, 26, -67, 41, 3, -16, -83, 54, 76, -79, -54, -50, 50, -25, -67, 0, 7, -31, 62, 99, 91, -41, 95, -55, 1, 43, 71, -56, 3, 19, 55, 27, 7, 3, -26, 27, 41, 97, 70, -88, -66, -13, 64, 71, -16, 91, 39, 12, 1, 38, 18, 40, 8, 32, 13, 56, 10, 21, -34, 77, -17, 59, -49, -58, -1, -63, -14, -29, 30, -13, 18, 20, -25, 21, 57, -52, 32, -39, -22, -2, 61, 57, -61, -81, -53, 70, 61, 14, 6, 72, 53, -33, -78, 37, 82, -45, 6, -52, -46, 44, -80, 31, 63, -66, -71, -51, -13, 98, 66, 16, 12, 83, 
  -80, -28, 17, 21, 87, 45, -53, -54, 12, -48, -62, -27, -10, 35, -27, -3, 11, -71, 25, 22, -39, 20, 19, 9, 24, -37, 84, -64, -8, -11, -69, 62, 91, 0, 57, 72, -11, 8, 84, 97, -22, -9, 101, 34, 46, -20, -61, -12, -8, 90, -30, -62, -42, 69, -6, 63, -41, 37, -13, 53, -36, 88, -59, 85, -41, -55, -39, 93, -76, 87, 54, 99, -7, -4, 51, 41, 66, 2, 30, -33, 45, 91, 83, -49, -19, 17, 1, -65, -10, 55, 91, 94, 36, 29, 77, 81, -18, 25, 21, 90, 1, -84, 79, 8, 7, 8, 60, 56, -26, 64, 86, -33, 55, -58, -48, 56, -4, 42, -52, 39, -42, -56, 54, 31, 32, 40, 74, 98, 15, 82, -53, 19, -36, -6, 90, 68, 9, -67, -44, -43, 101, -21, 7, -23, -11, -59, 65, 94, -65, 96, -11, -59, 102, 48, -39, -7, 50, 32, -29, 36, -62, 71, -77, 88, -1, 77, 3, 56, -13, -32, -58, -6, 94, -47, 60, -8, 12, 32, -45, 16, -40, 56, 31, 36, -66, -3, 59, 101, 40, -80, 38, -22, -77, -66, 44, 54, -52, -47, 13, -22, 101, 
  79, 48, 1, 77, 101, -29, 37, 58, -20, 43, -5, 18, 49, -76, 82, -41, -23, -72, -89, -44, -7, 89, 79, -66, -11, -29, 70, -24, -50, 51, -63, -88, -33, -42, 65, -92, 69, -99, -5, -92, -31, -55, -60, -45, -7, 70, -47, 8, 79, 34, 7, -46, 72, -32, -18, 25, -93, -69, -19, 36, -94, -28, 23, -60, -41, -48, -56, 121, 52, -60, -75, -20, -46, -5, 26, -83, 88, -79, 10, 85, -85, 34, 46, 82, 36, -54, -29, -40, -91, -26, -88, 63, -92, 85, -49, 56, -40, 64, 65, 73, 0, 49, -82, 36, -33, 39, 76, 90, -90, -11, 62, -12, -32, 8, -6, -91, 30, -58, 67, 65, -53, 20, -86, -79, -86, 91, -5, -92, -50, -83, 72, 89, -57, 36, 19, 68, 38, 77, 121, -19, 16, -45, 105, -18, -7, -80, 38, -16, -26, -9, 16, -34, -4, -67, 87, 55, 37, 69, -86, -38, 28, 71, 43, 55, 76, -55, -64, 46, -15, 36, -40, -42, -51, -8, 9, -27, -11, -61, -68, -13, 95, 16, -92, -58, -62, -86, 41, 90, -88, -26, -56, 13, 80, -86, -13, 34, -18, 44, 94, 71, -73, 
  51, -24, 53, -1, -65, 32, 35, -102, -32, -49, -79, -63, -40, -71, -57, -66, 17, -26, 50, -77, -36, 57, 61, 68, -55, 41, 80, 83, -77, -34, 0, -25, -11, 73, -63, 43, 48, 91, -95, -17, 92, 51, 25, -67, 52, 84, 22, -79, -6, -77, 46, -15, -76, 49, 60, 58, -95, 79, -84, 17, -44, -66, 73, 26, 53, 42, 84, 21, -65, -68, -103, -23, -113, -106, 43, -58, -14, 45, -18, -28, 89, 37, 35, 56, 74, 69, 43, 55, 13, -20, -94, 66, 81, 2, -92, 3, 83, -69, 62, -17, -93, -26, -65, -10, -76, -30, -13, 49, -53, 54, 60, -6, -23, -63, -45, -89, 18, 81, 32, 87, -74, -4, -25, -83, -32, -33, 45, 39, -82, 5, 88, -34, -1, -95, -99, -32, -59, -34, -37, -81, -65, -89, -97, 12, -54, -104, -56, -14, -54, 29, 18, -23, -85, 87, 73, -99, -30, 40, 23, 81, 60, -15, -91, -84, -53, -4, 49, -51, 26, 10, -81, -33, 30, -15, 43, 57, 56, -57, -72, -56, -33, -70, 58, -87, 50, 2, -39, -59, 26, -17, -26, 88, 47, -73, 82, -89, 56, -35, -28, 14, 49, 
  15, 18, 54, 79, 76, 2, -58, 58, -32, -8, 58, 25, 103, -14, 92, 13, 2, -63, -43, 66, -50, -78, 26, -57, 12, -44, 41, 43, -67, 20, 44, 62, -41, 57, 68, -21, 66, 64, 65, 0, 5, 25, 56, -67, -68, 29, -40, 13, 21, -13, -17, -41, 6, -61, -35, 67, -69, -39, -69, 25, -20, 96, 50, -79, -36, 90, -62, 38, 12, 88, 99, -20, -22, -53, 100, -33, -35, -25, -7, -44, -2, 22, -59, 48, -20, -77, -11, -35, -87, -83, 91, 68, 9, 56, 99, -39, -72, 69, 16, 93, 34, 74, 28, -67, 47, -62, -76, -51, -51, 19, 32, -9, -43, 103, -81, 64, 21, 66, 16, 90, 44, 4, -75, 36, -74, 89, -33, -62, 12, -43, -13, 30, 89, -62, 87, -66, -40, 43, -101, 85, 53, 87, 89, -23, -86, -36, 66, -84, -85, 21, 28, 83, 35, 70, 83, -19, -87, 34, -8, -86, -37, 9, 31, 44, 27, 15, 73, -47, 21, -36, -34, 14, -86, -33, -49, 70, 63, -86, 90, 73, 60, -86, 47, -12, 15, -4, 51, 30, -2, 16, 90, 62, -45, 91, 19, 80, -66, -22, 46, 71, 62, 
  -89, 29, 46, 27, -19, -83, -54, 15, 37, -13, -72, -3, -5, -50, 21, -51, -77, -90, 57, 28, 3, 58, -37, 24, 56, 88, 52, -94, -17, 18, 73, 85, -90, 56, -23, 79, 92, 85, -93, 8, -49, -35, -48, 50, 43, -45, 43, 70, -32, 77, -96, 29, -32, 48, -54, 23, 7, -30, -28, -59, -90, 56, -78, -12, -52, -37, -88, -73, 91, 30, -83, -83, 6, -78, 49, 38, -78, -44, 15, 60, 36, -88, -77, -9, 68, 4, 42, 74, 35, -59, 49, -57, -26, 14, 82, 2, -3, -62, -27, -13, -85, 68, 42, -76, -64, 18, -75, -87, -56, -58, -17, -75, 89, -63, 60, -32, -38, -65, 60, -14, -93, 2, 71, -5, 81, -8, -48, -2, 77, 54, -36, 41, 83, 53, 37, 36, -34, -57, -45, 43, 49, -11, 36, -28, 83, 77, 57, 30, -20, 19, 71, -39, -39, -28, 38, -21, -2, 48, -65, -75, -30, -6, 42, 20, 48, 3, 72, -53, 22, 29, 17, 87, 94, 92, -35, -71, 57, 20, 7, 52, -86, 21, -36, -32, 90, 48, 65, 65, 23, 48, -41, -40, 84, 70, 57, -5, -52, 78, -86, 88, -10, 
  84, -8, -49, -76, 36, 62, -7, 83, -39, -59, 62, 36, -72, -22, -19, -45, -49, -22, -82, -3, 58, -9, -6, 15, -43, 26, -46, -63, -10, -41, -33, 48, 96, 99, -38, -20, 0, -62, -80, 44, -78, 71, -33, 11, 59, 43, -44, -79, 98, 23, 21, 92, -3, 81, 14, 28, -15, 72, -13, -40, -16, -68, 81, -73, 38, -2, 65, -83, 53, 88, 67, 81, -36, 39, 49, -5, -47, 95, -38, -89, -10, 96, -67, 32, -84, 82, 66, 97, -45, -57, 4, 74, 8, -40, 94, -54, 12, 72, -41, -13, -85, -11, -75, -32, 22, -27, -54, -52, 56, 21, 54, 43, 89, 3, -18, -4, -18, 101, 99, 102, 11, 54, -44, -61, 77, -47, 27, -67, 77, 53, -62, -60, 23, 35, -19, 13, 13, 5, -45, -68, 63, 34, -1, 12, -68, 19, -49, 18, 12, -88, 54, -79, 78, -28, 90, -7, -84, 74, 25, 56, 61, 45, 85, -86, -89, -55, -21, 4, 73, -23, -66, 36, 86, -58, -73, -32, 35, -88, 8, -69, 33, -54, -59, -89, -31, -54, -53, 81, 15, 74, -14, 84, 6, -28, 39, 40, 83, -17, -38, 35, 11, 
  75, -38, -4, 59, -72, 89, 75, -25, -77, 32, -12, -18, -10, -27, -1, -30, 99, -7, 55, 49, 82, -82, -71, 22, -25, -32, -7, -5, -66, -29, 83, 27, 100, 53, 10, 14, 84, -78, 87, 86, 64, -3, -79, -9, -42, -48, -77, -16, -85, -57, -30, -30, 64, 65, -72, 17, 59, 87, -21, 31, 8, 34, -13, 99, 102, 99, -8, 39, 69, 95, 6, 94, -57, -64, -46, 2, 3, 62, -12, -12, 55, -57, -9, 101, -73, 23, -71, -48, 13, 103, -12, -66, -15, -37, -34, 40, -31, 8, -37, -39, 31, 71, -81, -80, 65, 40, 44, 28, 76, -40, -40, 39, -24, -35, -15, 81, 20, 1, -31, 57, 88, 29, 67, 71, -2, 27, 44, -48, 36, -80, 1, 7, 31, -89, -50, 83, 3, -5, 2, 68, -8, -44, 31, 64, -58, -36, -42, 101, -73, -53, -6, -14, 56, -17, 40, 35, -88, 81, 42, -67, 68, -69, 82, -19, 103, 82, 30, 55, 23, -75, -41, 7, 31, -61, 71, -61, -61, -77, -62, -64, -44, 48, 0, -5, 25, 23, 53, 94, 64, -43, -2, -28, -64, 1, -44, -4, 10, 6, -24, -79, 13, 
  5, -81, 12, -72, 42, -51, 5, -25, -25, -14, -65, 67, 18, 11, 87, 34, 62, -61, 60, 4, 64, 39, -8, -53, -22, -83, -32, -54, 65, 35, -78, 74, -92, -54, 86, 87, -70, -67, 60, 53, 95, -3, -19, -16, 81, -9, 18, 28, 45, -71, -60, 67, 35, 92, -49, 37, -87, 28, 41, 64, 67, -35, 1, 25, 10, -80, -68, -56, 80, 59, 22, 7, 6, 17, 30, -91, 8, 88, -49, -52, -13, -61, 10, 33, 51, -82, -81, 16, -32, 66, -51, -25, 35, -84, 40, -72, -58, 44, -53, -12, -61, -86, 56, 64, -44, 77, 95, -18, -67, 31, -31, 71, -16, 34, -57, 59, 76, -17, -82, 25, 44, -57, -5, 67, -57, -41, -17, 96, -6, 61, 8, -32, -49, -90, -39, 95, -90, 20, 43, -17, 33, -36, 31, 56, -47, -8, 48, 69, -55, 76, -89, 24, -12, -64, 83, 47, -31, 95, -18, 85, 8, 69, -72, -5, 6, 2, 65, -52, 97, 24, 13, 62, -18, 50, 82, -53, -4, -21, 51, 49, 98, 7, 41, -10, -87, -80, 67, 51, 28, 94, -41, 97, -34, 30, -21, -66, 56, 39, -71, 95, -63, 
  -20, 59, -2, -74, -64, -95, -37, -1, -82, -40, 71, -1, 36, 66, 40, 23, -93, -27, -71, 80, -79, -28, 13, 27, -24, 81, -72, -95, -50, -66, -54, -14, 50, 48, 3, -18, 87, 6, 13, -70, -51, -62, -51, 38, 90, 81, 77, 46, -25, 63, -89, 90, -82, 30, -52, -48, -37, 43, 25, -47, -69, -42, -78, -58, 80, 0, 23, -20, -22, -11, 79, 70, -66, 70, 77, 40, -43, 40, -57, 94, -44, -14, 14, 88, 86, 4, -52, -28, 44, -55, 8, 73, 36, 69, 86, 45, 33, 49, 24, -74, 91, 46, -38, -4, 32, 60, 4, 2, -38, 1, 27, 59, -60, 95, 70, -30, -68, 52, 44, 83, -7, 72, -95, -78, -18, 32, 70, 85, -80, -70, -66, -20, -30, -30, 36, 30, 39, -51, -9, 60, -94, 56, 63, 71, -75, -40, -33, -17, 89, -4, -35, 9, -94, 22, -40, 4, -70, -56, -33, 45, -1, 34, -64, -50, 82, 88, 18, -74, 73, 50, -31, -9, 28, 46, -53, -38, 63, -31, -60, 89, 91, -60, -46, -27, 35, -44, 6, 79, -15, 57, 2, 37, -90, 57, 36, 95, 55, -3, 26, -54, -85, 
  57, -57, -17, -13, 89, 31, 43, -68, 64, 76, 7, 61, -63, -13, 76, 66, -43, 24, -14, 67, 62, 63, 78, 23, -76, 80, 86, 34, -62, 34, 41, -70, 76, -97, -13, -1, -9, -59, 22, -71, 17, -20, 3, 83, -91, -62, -46, 88, -9, 26, -63, -86, 75, -81, -40, 18, 5, -44, -27, -33, -69, -82, -85, 79, -2, -84, -54, -53, 27, 0, -3, 36, 100, 27, -64, 55, 27, 48, 61, -4, -2, 35, -38, 61, -87, 28, -50, -57, 22, 74, -37, 2, 41, 52, 85, 6, 65, -68, 16, 4, -59, -33, 13, 52, -28, -1, -26, 27, 12, -12, -29, -7, -55, -59, -24, -2, 70, 62, -26, 12, -9, 32, -72, -80, -54, -62, -4, 52, 89, -75, 34, 47, -99, -50, -15, -74, -5, 30, -47, 76, -41, 95, -82, -18, -71, -85, 63, 22, -79, 44, -57, -83, 0, 65, 40, 27, 79, 21, 61, 42, 92, -25, -85, 52, -76, -15, -35, 21, -64, 68, -8, 31, -59, -59, 48, -80, 48, -83, 51, 14, 92, -21, 33, -6, 25, 66, -32, 54, -63, -11, 10, -92, -68, -98, -37, -71, -29, 48, 79, -38, -92, 
  -72, 69, -50, 54, -82, -29, -45, -19, 79, -47, 31, -83, 13, 80, 62, -8, 63, 32, 46, -87, -75, 60, -17, 90, -43, -65, 47, -43, -2, 33, 76, 68, 17, -62, 36, 71, 21, 26, 41, 82, 69, -86, -66, 55, -41, -73, 20, -86, 55, 44, -49, -86, -19, 54, 99, -32, -86, -13, -60, 56, -4, -31, 29, 63, -76, 71, -71, -39, -75, 58, 26, -55, 70, -54, 60, -76, -71, 77, 42, 85, 74, -26, -79, 60, 10, -79, 24, 36, 26, -39, -21, -60, 49, -48, 28, 85, 1, 81, -11, -27, -28, -81, -5, 63, 15, 31, -25, 33, -78, -16, -41, 59, 13, 59, -71, -85, -82, 58, 18, 5, 6, -78, 27, 88, 94, -76, -28, 28, 67, 42, 43, -67, -36, -73, -77, -65, -47, 75, -69, 72, -63, -78, -23, 83, 13, -22, 24, 59, -91, 2, -48, -51, -18, -39, 63, -93, 53, 17, -95, -82, -36, -34, -47, 30, 57, -13, -64, -19, -70, -1, -72, -9, -56, -31, 40, 80, 45, -70, 28, 18, -45, -79, -79, -16, -18, 24, 35, 0, -37, -56, -5, -10, -12, -62, -45, -35, 90, -57, -29, -40, 0, 
  -17, 19, 98, 58, -45, -57, -73, 53, -86, 48, 36, 56, -101, 52, 48, -49, 3, -87, -10, 10, -96, 83, 95, 31, -65, 2, -59, 43, -31, -35, -91, -32, -84, 21, 72, -80, -88, -91, 78, -81, -53, 35, 16, -19, 43, 37, -91, -64, 10, 71, 75, 64, -76, 17, 64, -48, -5, -33, 14, -80, -53, 16, -7, 62, 36, 79, -76, -34, 81, 39, 49, 61, -38, 71, -71, -11, -71, -86, 11, -25, -86, -25, 39, 38, 31, 50, -65, -5, 89, 71, -15, -51, -65, 31, -30, 0, 49, -33, -98, 74, -12, -91, 11, -46, 87, 64, 97, -31, -55, 45, -1, 7, 88, -20, 91, 3, 20, 16, -61, -55, -41, -55, 51, -11, 18, -62, -40, -65, 71, -81, 8, -31, -49, 71, -81, 86, -12, 74, 45, -35, 109, -56, -20, 23, 12, 56, -15, -47, 85, 66, -18, -87, -71, 96, -80, 95, -38, 51, -38, 37, 10, -44, 39, -51, -26, -99, -62, 59, 82, 85, 80, -19, -51, 58, 69, -88, 57, -89, -81, 79, -85, -64, -18, 2, 77, -73, 68, 56, -44, 14, -36, -31, -52, 69, 75, -57, 37, 13, 1, 79, -39, 
  -78, 69, -19, 91, -66, 79, -19, -16, -44, -75, -45, -36, -79, -78, -10, 91, 0, -5, -20, 43, 21, 79, 29, 42, -79, -20, 11, -73, -31, -75, -20, 42, -64, -52, 53, -24, -87, 12, -6, -71, 63, -27, 85, -5, 23, -6, -58, -88, 58, -22, -72, -6, 8, 84, -31, -16, 14, 46, -24, 86, -57, 49, -90, 71, 78, -55, -61, 46, 67, 6, -29, -68, 91, -23, 71, -42, 32, 76, 78, -9, 97, -63, -12, 76, 34, 81, 11, 16, 82, 85, 79, 25, 3, -60, 28, 19, 50, -3, -79, 28, -91, -41, -8, 31, 17, 49, 70, -37, -65, 22, 9, 57, 39, -4, -69, -7, 64, 95, 41, -90, 23, -25, 75, -80, 54, -72, 34, -9, 6, -75, -73, -55, -29, 95, 65, -65, 6, 63, -97, 8, -10, -23, -48, -11, -36, -57, 42, -68, -89, 45, 61, 65, -29, 20, 36, 38, 86, 83, 31, 21, -58, 73, -36, 29, 27, -29, -75, 31, 17, -21, 64, 88, 41, 40, -9, -27, 60, 62, 21, 74, 27, 86, 54, 8, 44, 61, 82, -69, -62, -8, -9, 8, -85, -56, -19, 28, 43, 85, -58, -70, -51, 
  -75, 12, 15, 71, 15, 4, -20, 77, 95, -93, -31, -42, 6, 66, -19, -87, -22, -54, -71, 88, -37, 61, 2, -40, -20, 0, -93, 82, -1, 86, 37, 95, -52, 56, -48, 92, -37, 45, -39, 62, -73, 1, -62, 91, -32, 30, 19, -56, 94, -79, 81, -39, 74, -28, 14, -58, 11, 30, -12, -20, 24, -39, -71, -15, -74, -83, 6, 32, -81, 94, 45, -60, -50, 7, -32, 15, 43, -18, 43, -94, 86, 85, 95, -94, 67, -28, -19, 33, -87, 38, -30, -27, -41, 85, -91, -48, -7, 95, 38, -50, -73, -6, 54, -25, 14, -14, -72, 45, -31, 85, 75, -53, 68, 4, -57, 58, 33, 68, -84, -62, -81, -20, 95, 18, 16, 27, -9, 49, -35, -36, -41, -66, -62, 41, -41, 41, -39, -68, -34, -33, -57, 28, 14, 38, -1, -14, 54, 76, 29, 13, 49, 93, -28, -84, 47, 20, -53, -82, 22, 57, 38, -1, 78, 73, 41, 17, 95, -13, 50, 81, -61, -7, 82, 52, 23, -16, 90, 34, 86, -39, 90, -39, 95, 54, 80, 58, -30, 74, 81, -50, -31, 76, -86, 52, -45, 80, 2, -90, 1, 65, 40, 
  -61, 48, -33, -31, -10, 13, -38, -51, -33, 58, 42, 10, -43, 80, 52, -28, -58, -32, 75, 13, 22, -12, -69, 77, -27, -85, -57, -82, -8, -25, 27, -1, 58, -33, -39, -49, 38, 58, 41, -46, -53, -59, -26, 80, -44, -27, 92, -77, -74, 1, -79, 69, 12, 45, -91, -35, 20, 22, 72, 21, 17, 5, -91, 52, -23, 91, 57, 38, 23, 7, -80, 21, 88, 15, 92, 16, -28, 61, 57, -81, 48, 89, 18, 32, -84, 20, 20, 37, 62, -24, -42, -86, 93, 94, 89, 80, -89, -7, 8, -64, 43, 61, -46, 62, 62, -66, 35, 38, -67, -10, 19, -26, 84, 51, -25, -6, 73, -73, -10, 23, 7, -91, -14, -8, -30, 65, -14, 61, 94, 17, -4, -2, 36, 49, -16, 90, -61, -7, -96, 20, 43, -34, -10, 92, -90, 71, 6, 15, 80, 11, -9, 79, 2, -74, -84, -44, -80, 42, 11, -48, 60, -68, -29, 81, 91, -85, -11, 35, 77, 10, -22, 89, 90, 62, -81, -20, 90, -80, 44, 24, 62, -8, -11, 67, -15, 81, 39, -25, -72, -19, 3, -80, -50, -73, -16, 57, -54, 14, -46, 50, -2, 
  -21, -27, 29, 78, 90, 91, 35, 68, -15, -39, -32, 13, 8, 64, 29, 74, 85, -34, 61, 67, -27, 22, -33, -74, 81, -3, 41, -23, -43, -35, 97, 96, 29, -23, 30, 92, -80, 48, 90, 5, 19, 17, -63, -6, 62, 89, -37, -60, 24, 8, -49, -49, -44, -6, 28, -43, -58, -29, -57, -77, -61, -56, -71, -38, 14, 17, 36, -35, 86, -10, -20, 45, -35, 18, -11, 67, -54, 73, 91, 81, 34, 19, -63, 2, -52, 33, -52, 86, 92, -72, -6, 2, 4, 26, -75, 42, 51, 48, -32, 80, 30, 56, 9, 88, -1, 32, 81, 63, -62, 89, 21, 23, -48, 9, 7, -60, -85, -44, -43, 15, -92, 67, 75, -20, -21, 87, -9, -19, -68, 50, 52, 85, 5, -67, 24, 23, 30, 16, -5, 68, 68, -73, -50, -73, -17, 41, -72, -72, -61, -83, -53, 35, -3, 71, 92, 9, -83, -38, 5, -44, 83, 12, -67, -15, -46, -89, 59, -37, 47, 34, 55, 94, 36, -60, -12, 32, 39, -6, -37, -58, 86, -33, -74, 36, 97, -66, -66, 59, -10, -1, 78, -63, 10, 75, 20, 67, 66, -75, -75, -78, -77, 
  -16, 0, -17, 34, -98, -65, 40, -7, 91, 63, 20, 92, -55, 27, 69, 42, -78, 45, 85, 28, 68, -20, 46, -37, 18, -18, -22, 96, -13, 27, 31, 96, -28, 37, 77, -20, 7, -49, -62, 69, 60, 38, -81, 2, 55, 34, -87, 82, 10, 47, -27, -59, -17, 98, -81, 91, -71, 91, 33, 16, 3, -91, 41, 10, -26, -13, -58, -97, -60, 48, 8, -89, 94, -19, -68, 60, -70, 47, 66, 88, 63, -15, -25, 49, -56, -69, 59, 66, 22, -71, -15, -88, -36, 20, 15, -74, -45, 70, -74, 3, 48, -17, 48, -65, -51, 43, 16, 91, 80, 9, -10, 21, -63, -31, 21, 21, 87, -89, 26, -42, -8, -68, 8, 68, -34, -57, 32, 79, -23, -32, 70, -12, -38, 92, 38, 1, 71, -20, -60, 71, -85, 70, -48, -31, 83, 46, -34, 22, 68, -71, -18, 71, -77, -13, 17, -31, 92, 54, -91, 22, -11, -12, -75, 77, -4, -13, 48, 55, 19, -66, 73, -20, -30, -17, 54, 73, 57, -70, -78, -23, 75, 1, -52, -75, -9, 16, 79, 87, 18, 30, -33, -88, 68, 20, -48, -54, 44, -37, -27, -88, 3, 
  -64, 84, -88, 8, -68, -15, -75, 75, -91, 83, 29, 49, -83, -85, 21, 17, 60, 90, 74, -68, -43, 89, 83, -77, 28, 81, -65, 20, -31, 45, 6, -88, -10, 67, -76, -66, -92, 92, -71, 53, -85, 9, 64, -44, 63, 48, 76, 36, -88, -38, -39, -52, -82, 82, -21, -23, -59, 32, -83, 42, 10, -52, -20, -13, -2, 60, 57, -35, 46, 73, 9, -72, 33, -55, -7, -58, 33, -19, -43, 55, 79, -86, 10, 2, -80, -1, -10, 72, 77, 29, -95, -47, 80, -73, -25, -23, 54, 0, -35, -78, 20, 48, 53, 95, 51, 88, -73, 57, 90, -28, 23, 72, 23, -6, 26, 19, 5, -33, -61, 55, 46, 70, 58, 79, -4, -50, 29, 21, -48, -36, 66, -47, -88, 24, -40, -80, -10, 82, -82, 47, 16, -90, -7, 74, -6, -55, -17, 78, 62, -92, -51, 13, -7, 27, -24, -13, 94, 14, 87, 64, 2, -63, 44, 37, -7, 14, -50, 12, 76, -10, 91, 21, -34, 10, 87, 62, 39, 66, 64, -4, -48, 94, 71, 79, -72, -9, -73, -64, 71, 21, 72, 24, -64, 49, 81, 40, 1, -41, 35, 90, -60, 
  35, 57, -19, -24, 7, -41, -16, -16, -18, -60, 22, -6, -41, 40, 11, 57, -66, 90, 46, 7, 20, 36, 33, 29, -50, 70, 13, 53, 42, 84, 51, -51, 65, -92, 34, 18, -89, 18, -86, 21, 40, -54, -76, 47, -72, 24, -92, 75, 71, 94, -41, -68, -29, -68, 10, 91, -9, 94, 79, 14, 11, -65, 46, 39, 15, -40, 23, 60, -72, -54, 81, 35, 43, -78, -71, -38, -18, 35, -68, 56, 28, 50, -2, 81, 36, 25, -19, -40, -3, 34, -92, -91, 15, 88, -61, -87, 32, -7, -23, 76, -80, -53, 3, -32, -81, 25, 10, 9, -20, -46, 81, 63, 20, 89, -8, -38, 0, -18, 27, 13, 46, -33, -68, 7, -73, 10, -42, -19, -70, 49, -70, -82, 91, 58, 93, -88, 14, 67, 14, 4, -77, 52, 19, -75, -68, -11, -95, -86, -42, 35, 50, -10, 21, 60, -18, 2, 86, -88, 59, -22, 73, -60, 86, -17, 36, 15, -63, 73, 8, -7, -25, 69, 56, -2, 79, -3, 35, 42, -11, 44, 69, 81, -71, 41, -33, -87, -87, -24, 92, -65, -72, 74, 88, 80, 5, -80, 81, 27, 75, -25, 92, 
  9, 20, -36, 86, -45, 79, 84, -14, -7, 64, -59, -93, -3, 31, 69, -21, 49, -54, -10, -95, -57, -33, -37, -34, 89, -52, -53, -56, -49, -81, 63, 76, -37, -81, -34, 55, 54, 55, -66, 84, 18, 65, -54, 56, 26, 25, -17, 45, -49, 53, -16, 78, 83, 56, 58, -11, -79, 36, 16, 66, 4, -86, 94, 95, -7, -78, 5, 19, 7, 16, -47, -95, -56, -28, 0, -40, -53, -53, -30, -14, -78, 43, -14, 15, -74, 46, -67, 66, 88, 82, -33, 88, -63, 49, 64, -22, -12, 61, -94, -29, 8, 52, 83, 65, -72, -15, 51, 14, 27, 87, -64, 15, 77, -28, -26, -76, 45, 16, 10, 20, 92, -87, 87, 87, -68, 85, 14, -29, -1, -22, -30, -19, 51, 42, -51, -48, -19, -37, -80, 75, -24, 3, 74, 83, 18, 89, -85, 3, 4, -4, -55, 48, -65, -29, -45, -19, -2, -37, 9, -15, -76, -44, 94, 72, 3, -78, 83, 4, 79, 40, 36, -15, -9, 83, 50, 24, 86, 22, 93, -23, 60, 87, -47, -77, -74, -57, -36, -29, 20, -93, 6, 11, 14, 51, -7, 0, -10, -35, -60, 66, -45, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 50,201 } };
const TfArray<1, float> quant1_scale = { 1, { 0.0016180493403226137, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int32_t tensor_data2[50] = { 0, 33, -89, 24, -258, 18, -38, 48, 35, -214, 0, -157, 0, 276, 40, 176, 0, -258, -185, -77, -212, -46, 101, 215, -140, -95, 259, 0, 234, -38, -142, 317, -82, -189, 64, -157, -154, -28, 0, 265, -280, 9, -88, 0, -88, -84, -97, 0, 0, 0, };
const TfArray<1, int> tensor_dimension2 = { 1, { 50 } };
const TfArray<1, float> quant2_scale = { 1, { 6.8440116592682898e-05, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[25*50] = { 
  -64, -80, -61, -23, -32, -78, 1, -8, 75, -15, -85, -94, -53, 64, 48, 75, -29, 43, 49, 79, -89, -48, -68, -56, 63, -58, -103, -39, 38, 17, 60, 65, -88, -13, 93, 9, 26, -29, -39, 36, -83, -57, 26, -97, -50, 72, -67, -63, 62, -42, 
  -66, 1, 6, 37, 14, -97, -96, -32, 25, -78, 105, -81, -63, 66, 45, 44, -96, 61, 80, 84, 82, -78, 101, -39, 103, 7, 51, -34, -65, 43, 78, 3, 60, 96, 67, -27, -4, 89, 82, -57, 40, 37, 14, -3, 59, 16, 92, -51, -47, -73, 
  -79, -53, -3, -75, -63, -23, -29, 20, 101, 79, 45, 2, 61, 46, 68, 22, 64, -57, -64, -8, -57, -3, 7, 11, -66, 12, 95, -2, 74, -19, 34, -1, 81, 80, -8, 100, 47, 70, -75, -97, -14, -65, 49, 69, 76, -23, -78, 47, -2, -13, 
  -67, -23, 40, -127, 75, 88, 72, 61, -87, 26, -75, 76, 43, -15, -69, -39, -87, 5, -110, -54, -42, 5, 7, 39, 2, -29, 93, -11, -52, -21, 93, -24, 49, 13, 64, -19, -86, -56, -64, 82, -65, -15, 11, 36, -28, -51, -15, -65, 95, -54, 
  15, 21, 87, -56, 5, -85, 19, 94, 61, -72, -48, -88, 70, 21, 42, 28, 43, 60, -99, -44, 55, 60, -50, -29, 36, -67, 51, -59, 80, 51, 72, -101, 16, -26, 81, -104, -44, -35, -2, -39, -66, -85, 11, -99, 38, 9, -43, 32, -75, 57, 
  61, 18, -20, -85, -102, 80, 79, -30, 63, -23, 7, -82, 91, -44, 71, 61, 65, 86, 82, -68, -68, -35, 96, 65, 78, -88, 16, -39, -22, -94, 24, -41, 7, 89, -90, 69, -79, -18, -5, -38, 64, 28, -26, -13, -53, -70, 25, 14, -35, -28, 
  80, 31, -31, -51, -45, -23, -18, 40, 79, 58, 61, 0, -86, 107, -55, -32, 14, 18, 53, 20, 28, 100, 64, 55, -67, -23, 38, -26, 12, 35, -20, 37, 5, 23, -109, -54, 48, 74, 11, 89, -75, 64, -83, -92, -53, 80, -83, -51, -75, 64, 
  -55, -51, -19, 81, 58, -106, -39, -90, 80, 68, 59, -3, 14, -30, -81, -17, 12, 79, 80, -4, 21, -55, 37, -22, 58, 76, -21, 52, -11, -60, 65, 47, 109, 40, 90, -5, -72, -95, -36, 90, -40, -43, 8, -82, 73, -77, -33, 40, -51, -19, 
  -69, -88, -3, 77, 40, -66, 42, 21, -100, 92, -28, 22, 90, -9, -21, 32, -88, 74, -70, -7, 24, -22, 40, 34, -54, 5, -19, -34, -99, -5, -85, -78, -75, -91, 8, -99, -20, 13, -31, -41, -78, 79, 66, 54, -19, -18, -100, -103, -77, 84, 
  -27, -74, 58, -55, -17, 36, 25, 101, 40, 105, 2, 41, 0, -11, -51, 86, 61, 108, 17, -92, 53, -10, -41, 57, -70, 2, -23, -102, -52, -99, -89, 3, 31, 47, 37, 6, 39, -78, -35, -80, 28, 27, 50, 50, 81, 9, -22, 75, -92, 54, 
  -3, 9, -27, 95, -59, 44, -88, -87, -47, 12, 92, -98, -37, -36, 88, 93, 87, 92, 45, -13, 9, 66, 5, -26, -44, -80, -99, 27, -31, 85, -1, -16, -73, -81, 4, -10, 59, -13, 1, -37, -42, -85, 91, -24, 29, 75, 44, 44, 47, -63, 
  15, 84, 71, 53, -73, -9, -35, 42, 93, 61, -30, 79, 10, 93, 46, 60, 27, -1, 21, 16, -35, -58, 2, -3, 29, 41, 104, -92, 99, 24, 46, 48, -32, -97, 44, 102, 84, 24, 18, 23, -30, -49, 57, -32, 10, 101, -14, -66, -96, -17, 
  70, -96, 42, 87, -46, -5, -23, -42, -67, -87, -53, -69, -94, -25, 95, 0, 65, 14, 28, 3, 5, 54, -22, -20, -94, 41, 11, 28, -61, 83, 97, -87, 101, -55, -67, 64, 10, -98, 36, -56, 71, -93, -68, -13, -66, -11, 10, -87, 30, -101, 
  -18, 51, 64, -12, 35, 94, 27, 3, 90, -11, -94, 75, 14, 16, 76, -34, -20, -87, -53, 15, -64, -106, 14, 13, -50, 73, -105, 38, 52, -85, 27, -45, -27, 57, 5, 14, 60, 74, -55, -47, -12, 46, 97, -48, 46, 77, 67, -71, 99, -64, 
  6, 63, -41, 65, -96, -35, 7, -49, 85, 116, 4, 32, -98, 50, -12, -95, -1, 55, -53, -31, 77, -40, -70, -21, 95, 95, 70, -16, 16, 1, 58, -100, 14, 49, -3, 83, 9, -1, -82, -11, 35, 71, -77, 68, -90, 87, 104, 20, 54, -103, 
  82, 85, 3, -92, 92, -32, -87, 13, 57, -53, -83, -46, 81, 89, 66, 17, 25, -55, 37, -67, 13, -31, -48, -53, 12, -80, -38, 85, 6, -25, 14, 0, 9, -102, -66, 32, 63, -29, 74, -94, -20, -6, -105, -74, -2, -71, -52, 104, 19, 13, 
  -31, 15, 9, -90, 64, -70, 29, -96, 22, -24, 5, 55, -55, 17, 13, 51, -61, 96, 82, 13, -76, 53, 60, -20, -31, -40, 84, 31, 16, 99, -8, 84, 81, -29, 44, -90, 27, -45, -105, 19, -74, 46, 88, -4, -58, 3, -13, 86, -42, 52, 
  91, 66, -33, 79, 88, 28, -56, -28, 45, 68, 46, 83, 56, -71, -71, -43, -12, 66, -31, -26, -5, 86, 44, -57, 45, 44, -51, 80, -46, 29, 36, -15, 84, 21, -81, 88, 99, 94, -76, -113, 89, 94, 54, 91, 43, 83, 90, 34, 31, -16, 
  65, -20, 56, -79, 71, -27, -85, -74, 29, -11, 1, 40, -71, 18, 5, -80, 95, 50, -22, 87, 93, 36, -24, -17, -106, -34, -4, 32, -64, 10, 12, 2, -48, 63, -85, -2, 86, 95, -73, -75, -36, 36, -33, 24, 21, 30, 70, 63, 93, -46, 
  32, -101, 67, 98, 28, -14, 99, 23, -8, 100, -35, -5, -84, -64, 16, 53, -34, 47, -55, 57, -22, 91, 31, -44, 31, -36, -93, -16, -23, 52, 92, -54, 110, -12, -101, 65, 2, -1, 82, -12, -37, 80, 63, 64, 66, -47, 57, 56, -52, 38, 
  29, -73, 18, -97, 88, -57, 11, 68, -86, -66, -50, -66, 35, -24, 6, -38, -94, -2, 19, 21, 80, 100, -5, 0, -88, -58, 94, 91, 62, -102, 10, -111, 16, -37, -32, 42, 60, -17, -94, 88, -66, -2, 94, -5, 26, -64, -94, -31, 40, 18, 
  -51, 63, -44, 86, -24, -7, 66, -46, 2, -101, 71, 55, 65, -33, -46, -84, 48, -57, 83, 83, 12, -60, 30, 63, -42, -79, -64, 69, -67, -12, -103, -69, 97, -17, -76, 36, -38, 41, -38, -39, -79, 21, -62, -74, 95, -79, -88, 20, 59, -77, 
  24, -17, -45, 75, 29, -26, 104, 49, -1, -106, -63, 80, 16, -85, 87, 59, -5, -97, -87, 30, 26, 95, -108, -19, 25, 52, -96, -3, 46, 30, 1, 23, -4, 41, 46, -43, -66, 63, -59, 69, 97, 9, 14, 15, 37, -44, 0, -34, 4, -13, 
  -61, 98, 75, -65, -2, -22, 33, 7, 76, 67, 88, -14, -43, 46, 55, -92, -69, -4, 14, -70, -52, -5, -96, -6, 22, -40, 102, -78, -13, -88, -63, 24, 36, -83, 46, 38, -10, 53, 85, -46, -45, -8, 49, -72, 73, -26, -58, 41, -33, -58, 
  -54, -74, -6, -35, -87, -85, -90, 94, 40, -57, -79, -96, -54, 35, -30, -2, -67, 50, -44, 100, 52, 5, -39, -53, -96, -26, 66, -59, -21, 94, -9, -25, 86, 8, 11, -97, -53, -50, 51, -45, -98, -102, -48, 67, -34, 50, 75, 0, -61, 78, 
};
const TfArray<2, int> tensor_dimension3 = { 2, { 25,50 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0026929322630167007, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[25] = { 0, 5, -70, -21, 0, 1, 136, -186, -12, -20, -51, 116, 0, -133, -150, -68, 132, -115, -75, 15, -116, 0, -61, -98, -61, };
const TfArray<1, int> tensor_dimension4 = { 1, { 25 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00013892595598008484, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[5*25] = { 
  -35, -11, -78, -3, -28, 79, -21, -112, 40, -46, -112, 8, 1, -84, -100, -13, -83, 66, -83, 40, 98, -90, 21, -38, 27, 
  68, -102, 62, 0, 35, 17, -106, 43, -84, 32, 44, 103, 40, 80, 26, 102, -45, 40, -33, 30, -22, 76, 88, 81, -21, 
  -116, 92, 50, 24, 45, -19, 15, 105, 121, -66, 93, -87, 103, -62, 30, -26, 15, 113, 110, 64, 17, -79, 62, 57, -62, 
  -104, 4, 51, 41, -10, 17, 65, -96, -72, -74, 116, 78, 37, -68, -22, 60, 70, -88, -25, -110, 85, -71, 9, 40, -109, 
  -10, 98, 76, -3, -85, -48, 36, 106, -25, -97, -82, -13, 70, 92, -127, -101, -14, 4, 19, 101, 97, 29, -116, -60, 7, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 5,25 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0038027740083634853, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[5] = { 0, -139, -207, 276, 432, };
const TfArray<1, int> tensor_dimension6 = { 1, { 5 } };
const TfArray<1, float> quant6_scale = { 1, { 9.4941482529975474e-05, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[3*5] = { 
  39, 54, -46, 16, -65, 
  -48, 92, 108, -127, -108, 
  -74, -115, -112, 44, -120, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 3,5 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0061843139119446278, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[3] = { 480, -318, 64, };
const TfArray<1, int> tensor_dimension8 = { 1, { 3 } };
const TfArray<1, float> quant8_scale = { 1, { 0.00013829849194735289, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,50 } };
const TfArray<1, float> quant9_scale = { 1, { 0.051589101552963257, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,25 } };
const TfArray<1, float> quant10_scale = { 1, { 0.024966375902295113, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<2, int> tensor_dimension11 = { 2, { 1,5 } };
const TfArray<1, float> quant11_scale = { 1, { 0.022362787276506424, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,3 } };
const TfArray<1, float> quant12_scale = { 1, { 0.05392121896147728, } };
const TfArray<1, int> quant12_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,3 } };
const TfArray<1, float> quant13_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,1,2 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 9,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 10,5,6 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteFullyConnectedParams opdata3 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs3 = { 3, { 11,7,8 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLiteSoftmaxParams opdata4 = { 1 };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 201, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 10050, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 1250, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 125, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 15, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 208, (TfLiteIntArray*)&tensor_dimension9, 50, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 25, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension11, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension12, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension13, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 14;
  for (size_t i = 0; i < 14; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 5; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 5; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  13, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 5; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
